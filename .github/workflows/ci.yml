name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  frontend-test-and-build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: latest

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'pnpm'
        cache-dependency-path: './frontend/pnpm-lock.yaml'

    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      working-directory: ./frontend

    - name: Run Biome checks
      run: pnpm exec biome ci ./
      working-directory: ./frontend

    - name: Type check
      run: pnpm exec tsc --noEmit
      working-directory: ./frontend

    - name: Build frontend
      run: pnpm run build
      working-directory: ./frontend

    - name: Test build artifacts
      run: |
        ls -la dist/
      working-directory: ./frontend

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: frontend/node_modules/
        key: ${{ runner.os }}-pnpm-${{ hashFiles('frontend/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-

  backend-test-and-build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        go-version: [1.23.x, 1.24.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go ${{ matrix.go-version }}
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('backend/go.mod') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Download dependencies
      run: go mod download
      working-directory: ./backend

    - name: Verify dependencies
      run: go mod verify
      working-directory: ./backend

    - name: Run go vet
      run: go vet ./...
      working-directory: ./backend

    - name: Run go fmt check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted:"
          gofmt -s -l .
          exit 1
        fi
      working-directory: ./backend

    - name: Run tests
      run: go test -v ./...
      working-directory: ./backend

    - name: Build backend
      run: go build -v -o wol-server ./...
      working-directory: ./backend

    - name: Test binary
      run: |
        ls -la wol-server
        ./wol-server -h
      working-directory: ./backend

  integration-test:
    runs-on: ubuntu-latest
    needs: [frontend-test-and-build, backend-test-and-build]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24.x'

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: latest

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'pnpm'
        cache-dependency-path: './frontend/pnpm-lock.yaml'

    - name: Install frontend dependencies
      run: pnpm install --frozen-lockfile
      working-directory: ./frontend

    - name: Build frontend
      run: pnpm run build
      working-directory: ./frontend

    - name: Build backend
      run: go build -o wol-server
      working-directory: ./backend

    - name: Start backend server
      run: |
        ./wol-server -port 8080 &
        echo $! > server.pid
        sleep 2
      working-directory: ./backend

    - name: Test server health
      run: |
        curl -f http://localhost:8080/health || exit 1
      continue-on-error: true

    - name: Stop server
      run: |
        if [ -f server.pid ]; then
          kill $(cat server.pid) || true
          rm server.pid
        fi
      working-directory: ./backend

  security-scan:
    runs-on: ubuntu-latest
    needs: [frontend-test-and-build, backend-test-and-build, integration-test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: latest

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'pnpm'
        cache-dependency-path: './frontend/pnpm-lock.yaml'

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: frontend/node_modules/
        key: ${{ runner.os }}-pnpm-${{ hashFiles('frontend/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-

    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      working-directory: ./frontend

    - name: Run security audit
      run: pnpm audit --audit-level moderate
      working-directory: ./frontend
      continue-on-error: true

    - name: Check for known vulnerabilities
      run: pnpm audit --audit-level high
      working-directory: ./frontend

    - name: Go security check
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...
      working-directory: ./backend
      continue-on-error: true