name: CD Pipeline

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed
    branches: [main]

jobs:
  deploy:
    runs-on: [self-hosted, linux, ARM64]
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.ref == 'refs/heads/main' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: latest

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'pnpm'
        cache-dependency-path: './frontend/pnpm-lock.yaml'

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24.x'

    - name: Install frontend dependencies
      run: pnpm install --frozen-lockfile
      working-directory: ./frontend

    - name: Build frontend for production
      run: pnpm run build
      working-directory: ./frontend

    - name: Build backend for production
      run: go build -o wol-server .
      working-directory: ./backend

    - name: Stop existing services (if running)
      run: |
        # Stop existing backend service if running
        sudo systemctl stop wake-on-lan.service || true
        sleep 2
      continue-on-error: true

    - name: Deploy application
      run: |
        # Create deployment directory for the complete application
        sudo mkdir -p /opt/wake-on-lan
        sudo mkdir -p /opt/wake-on-lan/frontend/dist

        # Copy backend binary
        sudo cp wol-server /opt/wake-on-lan/

        # Copy built frontend files to the location expected by Go server
        sudo cp -r dist/* /opt/wake-on-lan/frontend/dist/

        # Set proper permissions
        sudo chown -R root:root /opt/wake-on-lan
        sudo chmod 755 /opt/wake-on-lan/wol-server
        sudo chmod -R 644 /opt/wake-on-lan/frontend/dist/*
        sudo find /opt/wake-on-lan/frontend/dist -type d -exec chmod 755 {} \;
      working-directory: ./backend

    - name: Create systemd service file
      run: |
        sudo tee /etc/systemd/system/wake-on-lan.service > /dev/null <<EOF
        [Unit]
        Description=Wake-on-LAN Server with Frontend
        After=network.target

        [Service]
        Type=simple
        User=nobody
        Group=nogroup
        WorkingDirectory=/opt/wake-on-lan
        ExecStart=/opt/wake-on-lan/wol-server -port 8080 -host 0.0.0.0
        Restart=always
        RestartSec=5
        StandardOutput=journal
        StandardError=journal

        [Install]
        WantedBy=multi-user.target
        EOF

    - name: Start and enable service
      run: |
        # Reload systemd configuration
        sudo systemctl daemon-reload
        # Enable service to start on boot
        sudo systemctl enable wake-on-lan.service
        # Start the service
        sudo systemctl start wake-on-lan.service
        # Wait a moment for service to start
        sleep 3
        # Check service status
        sudo systemctl status wake-on-lan.service

    - name: Verify deployment
      run: |
        # Check if service is running
        sleep 5
        if curl -s http://localhost:8080/ > /dev/null 2>&1; then
          echo "✅ Application is running and responding on port 8080"
          echo "✅ Frontend is accessible through Go server"
        else
          echo "❌ Application is not responding on port 8080"
          sudo systemctl status wake-on-lan.service
          exit 1
        fi

        # Test API endpoints
        if curl -s http://localhost:8080/api/status?ip=127.0.0.1 > /dev/null 2>&1; then
          echo "✅ API endpoints are working"
        else
          echo "❌ API endpoints are not responding"
          exit 1
        fi

    - name: Show deployment info
      run: |
        echo "🚀 Wake-on-LAN Application deployed successfully!"
        echo ""
        echo "📊 Service Status:"
        sudo systemctl status wake-on-lan.service --no-pager
        echo ""
        echo "📝 Application Details:"
        echo "- Complete application running on: http://localhost:8080"
        echo "- Frontend (React): Served by Go server at /"
        echo "- API endpoints: /api/wake, /api/status"
        echo "- Static files location: /opt/wake-on-lan/frontend/dist/"
        echo "- Binary location: /opt/wake-on-lan/wol-server"
        echo ""
        echo "🔗 Cloudflare Tunnel Configuration:"
        echo "- Point your tunnel to: localhost:8080"
        echo "- This will serve both frontend and API on the same port"
        echo ""
        echo "📋 Management Commands:"
        echo "- View logs: sudo journalctl -u wake-on-lan.service -f"
        echo "- Restart service: sudo systemctl restart wake-on-lan.service"
        echo "- Stop service: sudo systemctl stop wake-on-lan.service"
        echo ""
        echo "📁 Deployed Files:"
        ls -la /opt/wake-on-lan/
        echo ""
        echo "Frontend files:"
        ls -la /opt/wake-on-lan/frontend/dist/ | head -10

    - name: Notify deployment completion
      run: |
        echo "📡 Deployment completed at: $(date)"
        echo "🌐 Your application should now be accessible via Cloudflare Tunnel"
