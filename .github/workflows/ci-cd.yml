name: CI/CD and Previews

on:
  push:
    branches: [ main ]
  pull_request:
    types: [ opened, reopened, synchronize, closed ]

jobs:
  # =====================================================================================
  # == BUILD JOBS (No changes here, but shown for context)
  # =====================================================================================
  frontend-test-and-build:
    runs-on: self-hosted
    outputs:
      artifact_name: frontend-dist
    strategy:
      matrix:
        node-version: [20.x]
    steps:
    - uses: actions/checkout@v4
    - uses: pnpm/action-setup@v2
    - uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'pnpm'
        cache-dependency-path: './frontend/pnpm-lock.yaml'
    - run: pnpm install --frozen-lockfile
      working-directory: ./frontend
    - run: pnpm exec biome ci ./
      working-directory: ./frontend
    - run: pnpm run build
      working-directory: ./frontend
    - uses: actions/upload-artifact@v4
      with:
        name: frontend-dist
        path: frontend/dist/

  backend-test-and-build:
    runs-on: self-hosted
    outputs:
      artifact_name: backend-binary
    strategy:
      matrix:
        go-version: ['1.22']
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
    - run: go mod tidy
      working-directory: ./backend
    - run: go test -v ./...
      working-directory: ./backend
    - run: go build -v -o wol-server ./...
      working-directory: ./backend
    - uses: actions/upload-artifact@v4
      with:
        name: backend-binary
        path: backend/wol-server

  # =====================================================================================
  # == NEW PROXY BUILD JOB
  # =====================================================================================
  proxy-build:
    runs-on: self-hosted
    outputs:
      artifact_name: proxy-binary
    strategy:
      matrix:
        go-version: ['1.22']
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
    - run: go mod tidy
      working-directory: ./proxy
    - run: go build -v -o proxy-server ./...
      working-directory: ./proxy
    - uses: actions/upload-artifact@v4
      with:
        name: proxy-binary
        path: proxy/proxy-server

  # =====================================================================================
  # == DEPLOY PREVIEW JOB
  # =====================================================================================
  deploy_preview:
    runs-on: self-hosted
    needs: [frontend-test-and-build, backend-test-and-build, proxy-build]
    if: github.event_name == 'pull_request' && github.event.action != 'closed'

    steps:
    - name: Ensure jq is installed
      run: sudo apt-get update && sudo apt-get install -y jq

    - name: Create preview directory
      run: |
        mkdir -p /tmp/pr-previews/pr-${{ github.event.number }}/frontend/dist
        echo "Created preview directory for PR #${{ github.event.number }}"

    - name: Download frontend artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ needs.frontend-test-and-build.outputs.artifact_name }}
        path: /tmp/pr-previews/pr-${{ github.event.number }}/frontend/dist

    - name: Download backend artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ needs.backend-test-and-build.outputs.artifact_name }}
        path: /tmp/pr-previews/pr-${{ github.event.number }}

    - name: Start Application
      id: start_app
      run: |
        PR_NUMBER=${{ github.event.number }}
        PORT=$((9000 + PR_NUMBER))
        APP_DIR="/tmp/pr-previews/pr-${PR_NUMBER}"
        PID_FILE="${APP_DIR}/app.pid"

        chmod +x "${APP_DIR}/wol-server"

        # Start the server in the background
        nohup "${APP_DIR}/wol-server" -port ${PORT} > "${APP_DIR}/app.log" 2>&1 &
        echo $! > ${PID_FILE}

        echo "App for PR #${PR_NUMBER} started on port ${PORT} with PID $(cat ${PID_FILE})"
        echo "port=${PORT}" >> $GITHUB_OUTPUT

    - name: Update Proxy Route
      run: |
        PR_NUMBER=${{ github.event.number }}
        PORT=${{ steps.start_app.outputs.port }}
        HOSTNAME="pr-${PR_NUMBER}.wol.tkymhrt.dpdns.org"
        TARGET="http://localhost:${PORT}"
        # This path must match the one in your proxy.service file
        ROUTES_FILE="/opt/wol-proxy/routes.json"

        # Use jq to add/update the route. Create file if not exists.
        # This is atomic and safe for concurrent runs.
        sudo touch ${ROUTES_FILE} && sudo chown $(whoami) ${ROUTES_FILE}
        temp_json=$(jq ".routes.\"${HOSTNAME}\" = \"${TARGET}\"" ${ROUTES_FILE})
        echo "${temp_json}" | sudo tee ${ROUTES_FILE} > /dev/null

        echo "Updated proxy config for ${HOSTNAME} -> ${TARGET}"

    - name: Reload Proxy
      run: |
        # Find PID of proxy service and send SIGHUP
        PROXY_PID=$(pgrep -f "/opt/wol-proxy/proxy-server")
        if [ -n "${PROXY_PID}" ]; then
          sudo kill -SIGHUP ${PROXY_PID}
          echo "Sent SIGHUP to proxy (PID: ${PROXY_PID})"
        else
          echo "Proxy process not found. It might need to be started."
          # You might want to fail the job here if the proxy is critical
        fi

    - name: Post Preview URL to PR
      uses: peter-evans/create-or-update-comment@v4
      with:
        issue-number: ${{ github.event.number }}
        body: |
          ðŸš€ **Preview Environment is Ready!**

          Your changes are now live at:
          ðŸ‘‰ **https://pr-${{ github.event.number }}.wol.tkymhrt.dpdns.org**

          (Note: It might take a minute for the proxy to reload and the service to become available.)

  # =====================================================================================
  # == CLEANUP PREVIEW JOB
  # =====================================================================================
  cleanup_preview:
    runs-on: self-hosted
    if: github.event_name == 'pull_request' && github.event.action == 'closed'

    steps:
    - name: Ensure jq is installed
      run: sudo apt-get update && sudo apt-get install -y jq

    - name: Stop Application
      run: |
        PR_NUMBER=${{ github.event.number }}
        APP_DIR="/tmp/pr-previews/pr-${PR_NUMBER}"
        PID_FILE="${APP_DIR}/app.pid"

        if [ -f "${PID_FILE}" ]; then
          PID=$(cat ${PID_FILE})
          echo "Stopping app for PR #${PR_NUMBER} (PID: ${PID})"
          kill ${PID} || true
        else
          echo "PID file not found for PR #${PR_NUMBER}. Nothing to stop."
        fi

    - name: Remove Proxy Route
      run: |
        PR_NUMBER=${{ github.event.number }}
        HOSTNAME="pr-${PR_NUMBER}.wol.tkymhrt.dpdns.org"
        ROUTES_FILE="/opt/wol-proxy/routes.json"

        if [ -f "${ROUTES_FILE}" ]; then
          # Use jq to delete the key
          temp_json=$(jq "del(.routes.\"${HOSTNAME}\")" ${ROUTES_FILE})
          echo "${temp_json}" | sudo tee ${ROUTES_FILE} > /dev/null
          echo "Removed proxy route for ${HOSTNAME}"
        fi

    - name: Reload Proxy
      run: |
        PROXY_PID=$(pgrep -f "/opt/wol-proxy/proxy-server")
        if [ -n "${PROXY_PID}" ]; then
          sudo kill -SIGHUP ${PROXY_PID}
          echo "Sent SIGHUP to proxy (PID: ${PROXY_PID})"
        fi

    - name: Delete preview directory
      run: |
        rm -rf /tmp/pr-previews/pr-${{ github.event.number }}
        echo "Deleted preview directory for PR #${{ github.event.number }}"

    - name: Post Cleanup Comment to PR
      uses: peter-evans/create-or-update-comment@v4
      with:
        issue-number: ${{ github.event.number }}
        body: |
          ðŸš® **Preview Environment Deactivated**

          This preview has been shut down.

  # =====================================================================================
  # == DEPLOY TO PRODUCTION JOB (Modified)
  # =====================================================================================
  deploy:
    runs-on: self-hosted
    needs: [frontend-test-and-build, backend-test-and-build, proxy-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-dist
        path: /tmp/prod-deployment/frontend/dist
    - uses: actions/download-artifact@v4
      with:
        name: backend-binary
        path: /tmp/prod-deployment
    - uses: actions/download-artifact@v4
      with:
        name: proxy-binary
        path: /tmp/prod-deployment

    - name: Deploy Proxy Service
      run: |
        # This is where you would place the proxy binary and its systemd service
        sudo mkdir -p /opt/wol-proxy
        sudo cp /tmp/prod-deployment/proxy-server /opt/wol-proxy/
        sudo cp proxy.service /etc/systemd/system/
        sudo systemctl daemon-reload
        sudo systemctl enable --now proxy.service
        echo "Proxy service deployed and started."

    - name: Deploy Application Files
      run: |
        sudo mkdir -p /opt/wake-on-lan/frontend/dist
        sudo cp /tmp/prod-deployment/wol-server /opt/wake-on-lan/
        sudo chown root:root /opt/wake-on-lan/wol-server
        sudo chmod 755 /opt/wake-on-lan/wol-server
        sudo cp -r /tmp/prod-deployment/frontend/dist/* /opt/wake-on-lan/frontend/dist/

    - name: Create systemd service file for main app
      run: |
        sudo tee /etc/systemd/system/wake-on-lan.service > /dev/null <<EOF
        [Unit]
        Description=Wake-on-LAN Server with Frontend
        After=network.target

        [Service]
        Type=simple
        User=nobody
        Group=nogroup
        WorkingDirectory=/opt/wake-on-lan
        ExecStart=/opt/wake-on-lan/wol-server -port 8080 -host 0.0.0.0
        Restart=always
        RestartSec=5
        StandardOutput=journal
        StandardError=journal

        [Install]
        WantedBy=multi-user.target
        EOF

    - name: Start and enable main app service
      run: |
        sudo systemctl daemon-reload
        sudo systemctl enable wake-on-lan.service
        sudo systemctl restart wake-on-lan.service
        echo "Main application service deployed and started."

    - name: Update Proxy Route for Production
      run: |
        HOSTNAME="wol.tkymhrt.dpdns.org"
        TARGET="http://localhost:8080" # Assuming main app runs on 8080
        ROUTES_FILE="/opt/wol-proxy/routes.json"

        sudo touch ${ROUTES_FILE} && sudo chown $(whoami) ${ROUTES_FILE}
        temp_json=$(jq ".routes.\"${HOSTNAME}\" = \"${TARGET}\"" ${ROUTES_FILE})
        echo "${temp_json}" | sudo tee ${ROUTES_FILE} > /dev/null
        echo "Updated proxy config for production: ${HOSTNAME} -> ${TARGET}"

    - name: Reload Proxy
      run: |
        PROXY_PID=$(pgrep -f "/opt/wol-proxy/proxy-server")
        if [ -n "${PROXY_PID}" ]; then
          sudo kill -SIGHUP ${PROXY_PID}
          echo "Sent SIGHUP to proxy (PID: ${PROXY_PID})"
        fi

    - name: Cleanup temp files
      run: rm -rf /tmp/prod-deployment
